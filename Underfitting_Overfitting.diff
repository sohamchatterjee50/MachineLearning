diff --git a/August_31/.ipynb_checkpoints/Untitled-checkpoint.ipynb b/August_31/.ipynb_checkpoints/Untitled-checkpoint.ipynb
new file mode 100644
index 0000000..7fec515
--- /dev/null
+++ b/August_31/.ipynb_checkpoints/Untitled-checkpoint.ipynb
@@ -0,0 +1,6 @@
+{
+ "cells": [],
+ "metadata": {},
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
diff --git a/August_31/.ipynb_checkpoints/plot_underfitting_overfitting-checkpoint.ipynb b/August_31/.ipynb_checkpoints/plot_underfitting_overfitting-checkpoint.ipynb
new file mode 100644
index 0000000..902953c
--- /dev/null
+++ b/August_31/.ipynb_checkpoints/plot_underfitting_overfitting-checkpoint.ipynb
@@ -0,0 +1,264 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'matplotlib'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+      "\u001b[0;32m<ipython-input-1-9e3324102725>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'matplotlib'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'inline'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[0;32m~/anaconda3/envs/test/lib/python3.6/site-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_line_magic\u001b[0;34m(self, magic_name, line, _stack_depth)\u001b[0m\n\u001b[1;32m   2324\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'local_ns'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_locals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2325\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2326\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2327\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m<decorator-gen-108>\u001b[0m in \u001b[0;36mmatplotlib\u001b[0;34m(self, line)\u001b[0m\n",
+      "\u001b[0;32m~/anaconda3/envs/test/lib/python3.6/site-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/anaconda3/envs/test/lib/python3.6/site-packages/IPython/core/magics/pylab.py\u001b[0m in \u001b[0;36mmatplotlib\u001b[0;34m(self, line)\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Available matplotlib backends: %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mbackends_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m             \u001b[0mgui\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menable_matplotlib\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgui\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgui\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgui\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_show_matplotlib_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgui\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/anaconda3/envs/test/lib/python3.6/site-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36menable_matplotlib\u001b[0;34m(self, gui)\u001b[0m\n\u001b[1;32m   3417\u001b[0m         \"\"\"\n\u001b[1;32m   3418\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpylabtools\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3419\u001b[0;31m         \u001b[0mgui\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_gui_and_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgui\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpylab_gui_select\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3421\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mgui\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'inline'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/anaconda3/envs/test/lib/python3.6/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mfind_gui_and_backend\u001b[0;34m(gui, gui_select)\u001b[0m\n\u001b[1;32m    278\u001b[0m     \"\"\"\n\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m     \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgui\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgui\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'auto'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'matplotlib'"
+     ]
+    }
+   ],
+   "source": [
+    "%matplotlib inline"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "\n",
+    "============================\n",
+    "Underfitting vs. Overfitting\n",
+    "============================\n",
+    "\n",
+    "This example demonstrates the problems of underfitting and overfitting and\n",
+    "how we can use linear regression with polynomial features to approximate\n",
+    "nonlinear functions. The plot shows the function that we want to approximate,\n",
+    "which is a part of the cosine function. In addition, the samples from the\n",
+    "real function and the approximations of different models are displayed. The\n",
+    "models have polynomial features of different degrees. We can see that a\n",
+    "linear function (polynomial with degree 1) is not sufficient to fit the\n",
+    "training samples. This is called **underfitting**. A polynomial of degree 4\n",
+    "approximates the true function almost perfectly. However, for higher degrees\n",
+    "the model will **overfit** the training data, i.e. it learns the noise of the\n",
+    "training data.\n",
+    "We evaluate quantitatively **overfitting** / **underfitting** by using\n",
+    "cross-validation. We calculate the mean squared error (MSE) on the validation\n",
+    "set, the higher, the less likely the model generalizes correctly from the\n",
+    "training data.\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 32,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Automatically created module for IPython interactive environment\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 1008x360 with 3 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "print(__doc__)\n",
+    "\n",
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "from sklearn.pipeline import Pipeline\n",
+    "from sklearn.preprocessing import PolynomialFeatures\n",
+    "from sklearn.linear_model import LinearRegression\n",
+    "from sklearn.model_selection import cross_val_score\n",
+    "\n",
+    "\n",
+    "def true_fun(X):\n",
+    "    return np.cos(1.5 * np.pi * X)\n",
+    "\n",
+    "np.random.seed(0)\n",
+    "\n",
+    "n_samples = 50\n",
+    "degrees = [1, 4, 15]\n",
+    "\n",
+    "X = np.sort(np.random.rand(n_samples))\n",
+    "y = true_fun(X) + np.random.randn(n_samples) * 0.1\n",
+    "\n",
+    "plt.figure(figsize=(14, 5))\n",
+    "for i in range(len(degrees)):\n",
+    "    ax = plt.subplot(1, len(degrees), i + 1)\n",
+    "    plt.setp(ax, xticks=(), yticks=())\n",
+    "\n",
+    "    polynomial_features = PolynomialFeatures(degree=degrees[i],\n",
+    "                                             include_bias=False)\n",
+    "    linear_regression = LinearRegression()\n",
+    "    pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
+    "                         (\"linear_regression\", linear_regression)])\n",
+    "    pipeline.fit(X[:, np.newaxis], y)\n",
+    "\n",
+    "    # Evaluate the models using crossvalidation\n",
+    "    scores = cross_val_score(pipeline, X[:, np.newaxis], y,\n",
+    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
+    "\n",
+    "    X_test = np.linspace(0, 1, 100)\n",
+    "    plt.plot(X_test, pipeline.predict(X_test[:, np.newaxis]), label=\"Model\")\n",
+    "    plt.plot(X_test, true_fun(X_test), label=\"True function\")\n",
+    "    plt.scatter(X, y, edgecolor='b', s=20, label=\"Samples\")\n",
+    "    plt.xlabel(\"x\")\n",
+    "    plt.ylabel(\"y\")\n",
+    "    plt.xlim((0, 1))\n",
+    "    plt.ylim((-2, 2))\n",
+    "    plt.legend(loc=\"best\")\n",
+    "    plt.title(\"Degree {}\\nMSE = {:.2e}(+/- {:.2e})\".format(\n",
+    "        degrees[i], -scores.mean(), scores.std()))\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'sklearn'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+      "\u001b[0;32m<ipython-input-3-0842d32f1d71>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmax_degree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmean_scores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscore_stds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_mses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_mses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresidues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_degree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     polynomial_features = PolynomialFeatures(d+1,\n",
+      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sklearn'"
+     ]
+    }
+   ],
+   "source": [
+    "from sklearn.metrics import mean_squared_error\n",
+    "max_degree = 8\n",
+    "mean_scores, score_stds, train_mses, test_mses, residues = [], [], [], [], None\n",
+    "for d in range(max_degree):\n",
+    "    polynomial_features = PolynomialFeatures(d+1,\n",
+    "                                             include_bias=False)\n",
+    "    linear_regression = LinearRegression()\n",
+    "    pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
+    "                         (\"linear_regression\", linear_regression)])\n",
+    "    pipeline.fit(X[:, np.newaxis], y)\n",
+    "\n",
+    "    # Evaluate the models using crossvalidation\n",
+    "    scores = cross_val_score(pipeline, X[:, np.newaxis], y,\n",
+    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
+    "    mean_scores.append(-scores.mean())\n",
+    "    score_stds.append(scores.std())\n",
+    "    train_mses.append(mean_squared_error(y, pipeline.predict(X[:, np.newaxis])))\n",
+    "    \n",
+    "    X_test = np.linspace(0, 1, 100)\n",
+    "    true_vals = true_fun(X_test)\n",
+    "    pred_vals = pipeline.predict(X_test[:, np.newaxis])\n",
+    "    if d == 3:\n",
+    "        residues = true_vals - pred_vals\n",
+    "    test_mses.append(mean_squared_error(true_vals, pred_vals))\n",
+    "\n",
+    "deg = np.linspace(1, max_degree, max_degree)\n",
+    "fig, ax1 = plt.subplots()\n",
+    "\n",
+    "color = 'tab:red'\n",
+    "ax1.set_xlabel('Degree')\n",
+    "ax1.set_ylabel('Train Error', color=color)\n",
+    "ax1.plot(deg, train_mses, color=color)\n",
+    "ax1.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "ax2 = ax1.twinx()\n",
+    "color = 'tab:blue'\n",
+    "ax2.set_ylabel('Test Error', color=color)\n",
+    "ax2.plot(deg, mean_scores, color=color)\n",
+    "ax2.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "fig1, ax3 = plt.subplots()\n",
+    "\n",
+    "color = 'tab:red'\n",
+    "ax3.set_xlabel('Degree')\n",
+    "ax3.set_ylabel('Train Error', color=color)\n",
+    "ax3.plot(deg, train_mses, color=color)\n",
+    "ax3.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "ax4 = ax3.twinx()\n",
+    "color = 'tab:blue'\n",
+    "ax4.set_ylabel('STD', color=color)\n",
+    "ax4.plot(deg, score_stds, color=color)\n",
+    "ax4.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "fig1.tight_layout()\n",
+    "\n",
+    "plt.figure(3)\n",
+    "plt.hist(residues, bins=50)\n",
+    "plt.gca().set(title='Residue Histogram', ylabel='Frequency');\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "hello\n"
+     ]
+    }
+   ],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.10"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
diff --git a/August_31/Untitled.ipynb b/August_31/Untitled.ipynb
new file mode 100644
index 0000000..3da39ec
--- /dev/null
+++ b/August_31/Untitled.ipynb
@@ -0,0 +1,32 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.10"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
diff --git a/August_31/plot_underfitting_overfitting.ipynb b/August_31/plot_underfitting_overfitting.ipynb
new file mode 100644
index 0000000..26c14a6
--- /dev/null
+++ b/August_31/plot_underfitting_overfitting.ipynb
@@ -0,0 +1,242 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "%matplotlib inline"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "\n",
+    "============================\n",
+    "Underfitting vs. Overfitting\n",
+    "============================\n",
+    "\n",
+    "This example demonstrates the problems of underfitting and overfitting and\n",
+    "how we can use linear regression with polynomial features to approximate\n",
+    "nonlinear functions. The plot shows the function that we want to approximate,\n",
+    "which is a part of the cosine function. In addition, the samples from the\n",
+    "real function and the approximations of different models are displayed. The\n",
+    "models have polynomial features of different degrees. We can see that a\n",
+    "linear function (polynomial with degree 1) is not sufficient to fit the\n",
+    "training samples. This is called **underfitting**. A polynomial of degree 4\n",
+    "approximates the true function almost perfectly. However, for higher degrees\n",
+    "the model will **overfit** the training data, i.e. it learns the noise of the\n",
+    "training data.\n",
+    "We evaluate quantitatively **overfitting** / **underfitting** by using\n",
+    "cross-validation. We calculate the mean squared error (MSE) on the validation\n",
+    "set, the higher, the less likely the model generalizes correctly from the\n",
+    "training data.\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Automatically created module for IPython interactive environment\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 1008x360 with 3 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "print(__doc__)\n",
+    "\n",
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "from sklearn.pipeline import Pipeline\n",
+    "from sklearn.preprocessing import PolynomialFeatures\n",
+    "from sklearn.linear_model import LinearRegression\n",
+    "from sklearn.model_selection import cross_val_score\n",
+    "\n",
+    "\n",
+    "def true_fun(X):\n",
+    "    return np.cos(1.5 * np.pi * X)\n",
+    "\n",
+    "np.random.seed(0)\n",
+    "\n",
+    "n_samples = 50\n",
+    "degrees = [1, 4, 15]\n",
+    "\n",
+    "X = np.sort(np.random.rand(n_samples))\n",
+    "y = true_fun(X) + np.random.randn(n_samples) * 0.1\n",
+    "\n",
+    "plt.figure(figsize=(14, 5))\n",
+    "for i in range(len(degrees)):\n",
+    "    ax = plt.subplot(1, len(degrees), i + 1)\n",
+    "    plt.setp(ax, xticks=(), yticks=())\n",
+    "\n",
+    "    polynomial_features = PolynomialFeatures(degree=degrees[i],\n",
+    "                                             include_bias=False)\n",
+    "    linear_regression = LinearRegression()\n",
+    "    pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
+    "                         (\"linear_regression\", linear_regression)])\n",
+    "    pipeline.fit(X[:, np.newaxis], y)\n",
+    "\n",
+    "    # Evaluate the models using crossvalidation\n",
+    "    scores = cross_val_score(pipeline, X[:, np.newaxis], y,\n",
+    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
+    "\n",
+    "    X_test = np.linspace(0, 1, 100)\n",
+    "    plt.plot(X_test, pipeline.predict(X_test[:, np.newaxis]), label=\"Model\")\n",
+    "    plt.plot(X_test, true_fun(X_test), label=\"True function\")\n",
+    "    plt.scatter(X, y, edgecolor='b', s=20, label=\"Samples\")\n",
+    "    plt.xlabel(\"x\")\n",
+    "    plt.ylabel(\"y\")\n",
+    "    plt.xlim((0, 1))\n",
+    "    plt.ylim((-2, 2))\n",
+    "    plt.legend(loc=\"best\")\n",
+    "    plt.title(\"Degree {}\\nMSE = {:.2e}(+/- {:.2e})\".format(\n",
+    "        degrees[i], -scores.mean(), scores.std()))\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {
+    "scrolled": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "from sklearn.metrics import mean_squared_error\n",
+    "max_degree = 8\n",
+    "mean_scores, score_stds, train_mses, test_mses, residues = [], [], [], [], None\n",
+    "for d in range(max_degree):\n",
+    "    polynomial_features = PolynomialFeatures(d+1,\n",
+    "                                             include_bias=False)\n",
+    "    linear_regression = LinearRegression()\n",
+    "    pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
+    "                         (\"linear_regression\", linear_regression)])\n",
+    "    pipeline.fit(X[:, np.newaxis], y)\n",
+    "\n",
+    "    # Evaluate the models using crossvalidation\n",
+    "    scores = cross_val_score(pipeline, X[:, np.newaxis], y,\n",
+    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
+    "    mean_scores.append(-scores.mean())\n",
+    "    score_stds.append(scores.std())\n",
+    "    train_mses.append(mean_squared_error(y, pipeline.predict(X[:, np.newaxis])))\n",
+    "    \n",
+    "    X_test = np.linspace(0, 1, 100)\n",
+    "    true_vals = true_fun(X_test)\n",
+    "    pred_vals = pipeline.predict(X_test[:, np.newaxis])\n",
+    "    if d == 3:\n",
+    "        residues = true_vals - pred_vals\n",
+    "    test_mses.append(mean_squared_error(true_vals, pred_vals))\n",
+    "\n",
+    "deg = np.linspace(1, max_degree, max_degree)\n",
+    "fig, ax1 = plt.subplots()\n",
+    "\n",
+    "color = 'tab:red'\n",
+    "ax1.set_xlabel('Degree')\n",
+    "ax1.set_ylabel('Train Error', color=color)\n",
+    "ax1.plot(deg, train_mses, color=color)\n",
+    "ax1.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "ax2 = ax1.twinx()\n",
+    "color = 'tab:blue'\n",
+    "ax2.set_ylabel('Test Error', color=color)\n",
+    "ax2.plot(deg, mean_scores, color=color)\n",
+    "ax2.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "fig1, ax3 = plt.subplots()\n",
+    "\n",
+    "color = 'tab:red'\n",
+    "ax3.set_xlabel('Degree')\n",
+    "ax3.set_ylabel('Train Error', color=color)\n",
+    "ax3.plot(deg, train_mses, color=color)\n",
+    "ax3.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "ax4 = ax3.twinx()\n",
+    "color = 'tab:blue'\n",
+    "ax4.set_ylabel('STD', color=color)\n",
+    "ax4.plot(deg, score_stds, color=color)\n",
+    "ax4.tick_params(axis='y', labelcolor=color)\n",
+    "\n",
+    "fig1.tight_layout()\n",
+    "\n",
+    "plt.figure(3)\n",
+    "plt.hist(residues, bins=50)\n",
+    "plt.gca().set(title='Residue Histogram', ylabel='Frequency');\n",
+    "plt.show()"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.10"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
